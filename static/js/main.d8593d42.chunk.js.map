{"version":3,"sources":["Component/card/card.component.jsx","Component/cardlist/CardList.component.jsx","Component/SearchBox/search.component.jsx","App.js","serviceWorker.js","index.js"],"names":["Card","props","className","src","monster","id","alt","name","email","Cardlist","monsters","map","key","Search","onHandlechange","type","placeholder","onChange","App","onHandle","e","setState","monsterSearch","target","value","state","Monster_list","fetch","then","response","json","users","this","searchField","filter","toLowerCase","includes","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"2UAGaA,G,MAAO,SAACC,GAAD,OACnB,yBAAKC,UAAU,kBACd,yBACCC,IAAG,+BAA0BF,EAAMG,QAAQC,GAAxC,aACHC,IAAI,kBAEL,4BAAKL,EAAMG,QAAQG,MACnB,4BAAKN,EAAMG,QAAQI,UCNRC,G,MAAW,SAACR,GAAD,OACvB,yBAAKC,UAAU,aACbD,EAAMS,SAASC,KAAI,SAACP,GAAD,OACnB,kBAAC,EAAD,CAAMQ,IAAKR,EAAQC,GAAID,QAASA,UCJtBS,G,MAAS,SAAC,GAAD,IAAGC,EAAH,EAAGA,eAAH,OACrB,yBAAKZ,UAAU,eACd,2BACUa,KAAK,SAEdC,YAAY,iBACZC,SAAUH,OC4BEI,G,wDA9Bd,aAAe,IAAD,8BACb,gBAWDC,SAAW,SAACC,GACX,EAAKC,SAAS,CAAEC,cAAeF,EAAEG,OAAOC,SAXxC,EAAKC,MAAQ,CACZC,aAAc,GACdJ,cAAe,IAJH,E,gEAOO,IAAD,OACnBK,MAAM,8CACJC,MAAK,SAACC,GAAD,OAAcA,EAASC,UAC5BF,MAAK,SAACG,GAAD,OAAW,EAAKV,SAAS,CAAEK,aAAcK,S,+BAKvC,IAAD,EACgCC,KAAKP,MAArCH,EADA,EACAA,cACFW,EAFE,EACeP,aACUQ,QAAO,SAAC9B,GAAD,OACvCA,EAAQG,KAAK4B,cAAcC,SAASd,EAAca,kBAEnD,OACC,yBAAKjC,UAAU,OACd,+CACA,kBAAC,EAAD,CAAQY,eAAgBkB,KAAKb,WAC7B,kBAAC,EAAD,CAAUT,SAAUuB,S,GAzBNI,cCMEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBtB,MAAK,SAAAuB,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.d8593d42.chunk.js","sourcesContent":["import React from \"react\";\r\nimport \"./card.style.css\";\r\n\r\nexport const Card = (props) => (\r\n\t<div className=\"card-container\">\r\n\t\t<img\r\n\t\t\tsrc={`https://robohash.org/${props.monster.id}?set=set2`}\r\n\t\t\talt=\"monster_image\"\r\n\t\t></img>\r\n\t\t<h3>{props.monster.name}</h3>\r\n\t\t<h3>{props.monster.email}</h3>\r\n\t</div>\r\n);\r\n","import React from \"react\";\r\nimport { Card } from \"../card/card.component\";\r\nimport \"./CardList.style.css\";\r\n\r\nexport const Cardlist = (props) => (\r\n\t<div className=\"card-list\">\r\n\t\t{props.monsters.map((monster) => (\r\n\t\t\t<Card key={monster.id} monster={monster} />\r\n\t\t))}   \r\n\t</div>\r\n);\r\n","import React from \"react\";\r\nimport \"./search.style.css\";\r\n\r\nexport const Search = ({ onHandlechange }) => (\r\n\t<div className=\"searchField\">\r\n\t\t<input\r\n            type=\"search\"\r\n            \r\n\t\t\tplaceholder=\"monster search\"\r\n\t\t\tonChange={onHandlechange}\r\n\t\t></input>\r\n\t</div>\r\n);\r\n","import React, { Component } from \"react\";\nimport { Cardlist } from \"./Component/cardlist/CardList.component\";\nimport { Search } from \"./Component/SearchBox/search.component\";\n\nimport \"./App.css\";\n\nclass App extends Component {\n\tconstructor() {\n\t\tsuper();\n\t\tthis.state = {\n\t\t\tMonster_list: [],\n\t\t\tmonsterSearch: \"\",\n\t\t};\n\t}\n\tcomponentDidMount() {\n\t\tfetch(\"https://jsonplaceholder.typicode.com/users\")\n\t\t\t.then((response) => response.json())\n\t\t\t.then((users) => this.setState({ Monster_list: users }));\n\t}\n\tonHandle = (e) => {\n\t\tthis.setState({ monsterSearch: e.target.value });\n\t};\n\trender() {\n\t\tconst { monsterSearch, Monster_list } = this.state;\n\t\tconst searchField = Monster_list.filter((monster) =>\n\t\t\tmonster.name.toLowerCase().includes(monsterSearch.toLowerCase())\n\t\t);\n\t\treturn (\n\t\t\t<div className=\"App\">\n\t\t\t\t<h1>Monster Rolodex</h1>\n\t\t\t\t<Search onHandlechange={this.onHandle} />\n\t\t\t\t<Cardlist monsters={searchField} />\n\t\t\t</div>\n\t\t);\n\t}\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}